sqrt(mean((predictsvm-testing$CompressiveStrength)^2))
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
library(lubridate)
dat <- read.csv(url)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
fit <- bats(tstrain)
x <- forecast(fit)
x
dim(x)
x
dim(X)
dim(x)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modelLasso <- train(CompressiveStrength ~ ., data = training, method="lm")
modelLasso <- train(CompressiveStrength ~ ., data = training, method="lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
library(elasticnet)
plot.enet(modLasso$finalModel, xvar = "penalty", use.color = TRUE)
library(elasticnet)
plot.enet(modelLasso$finalModel, xvar = "penalty", use.color = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(caret)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE, na.strings=c("NA",""))
testingFinal <- read.csv("data/pml-testing.csv", stringsAsFactors = FALSE, na.strings=c("NA",""))
# dim(trainingInitial); dim(testingFinal)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
# dim(df)
df$user_name <- as.factor(df$user_name)
testingFinal$user_name <- as.factor(testingFinal$user_name)
inTrain <- createDataPartition(y = df$classe, p = 0.6, list = FALSE)
training <- df[inTrain,]
temp <- df[-inTrain,]
inTest <- createDataPartition(y = temp$classe, p = 0.5, list = FALSE)
testing <- temp[inTest,]
validation  <- temp[-inTest,]
# dim(df); dim(training); dim(testing); dim(validation)
# modelglm <- train(classe ~ ., data = training, method="multinom")
# modelglm
library(nnet)
multi <- lm(classe ~ ., data = training)
multiX <- multinom(classe ~ ., data = training)
modelglm <- train(classe ~ ., data = training, method="multinom", maxit=50)
modeltree <- train(classe ~ . , data = training, method="rpart")
library(dplyr)
library(ggplot2)
library(caret)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE, na.strings=c("NA",""))
testingFinal <- read.csv("data/pml-testing.csv", stringsAsFactors = FALSE, na.strings=c("NA",""))
# dim(trainingInitial); dim(testingFinal)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
# dim(df)
df$user_name <- as.factor(df$user_name)
testingFinal$user_name <- as.factor(testingFinal$user_name)
inTrain <- createDataPartition(y = df$classe, p = 0.6, list = FALSE)
training <- df[inTrain,]
temp <- df[-inTrain,]
inTest <- createDataPartition(y = temp$classe, p = 0.5, list = FALSE)
testing <- temp[inTest,]
validation  <- temp[-inTest,]
# dim(df); dim(training); dim(testing); dim(validation)
modelglm <- train(classe ~ ., data = training, method="multinom", maxit=20)
modelglm <- train(classe ~ ., data = training, method="multinom", maxit=20)
dim(training)
str(training)
names(training)
hist(training$roll_belt)
hist(log(training$roll_belt))
hist((training$roll_belt-mean(training$roll_belt))/sd(training$roll_belt))
hist(training$pitch_belt)
hist((training$pitch_belt-mean(training$pitch_belt))/sd(training$pitch_belt))
hist(training$yaw_belt)
?glm
M <- abs(cor(training[,-60]))
dim(training)
M <- abs(cor(training))
head(training)
M <- abs(cor(training[,7:59]))
diag(M) <- 0
which(M>0.8,arr.ind=T)
which(M>0.9,arr.ind=T)
modeltree <- train(classe ~ . , data = training, method="rpart")
modelrp <- train(classe ~ . , data = training, method="rpart")
modelrp <- train(classe ~ . , data = training, method="rpart")
plot(modelrp$finalModel, uniform = TRUE, main="Classification Tree")
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modelrp$finalModel)
modelbag <- train(classe ~ ., data = training, method="bagEarth")
cctrl1 <- trainControl(method = "cv", number = 3, returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary,
seed = list(a = 1:9, b = 1:9, c = 1:9, d = 10))
modelbag <- train(classe ~ ., data = training, method="bagEarth", trControl = cctrl1)
cctrl1 <- trainControl(method = "cv", number = 3, returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary,
seed = list(a = 1:9, b = 1:9, c = 1:9, d = 10))
modelbag <- train(training[, -ncol(training)], training$classe, method="bagEarth", trControl = cctrl1)
modelbag <- train(classe ~ ., method="bagEarth")
modelbag <- train(classe ~ ., data = training, method="bagEarth")
?bagEarth
classe <- training$classe
predictors <- training[,-60]
modelbe <- bag(predictors, classe, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
modelrf <- train(classe ~ ., data = training, method="rf", prox=TRUE)
modelrf <- train(classe ~ ., data = training, method="rf", prox=TRUE,
trControl = trainControl(method="cv"), number=3)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(caret)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE, na.strings=c("NA",""))
testingFinal <- read.csv("data/pml-testing.csv", stringsAsFactors = FALSE, na.strings=c("NA",""))
# dim(trainingInitial); dim(testingFinal)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
# dim(df)
df$user_name <- as.factor(df$user_name)
testingFinal$user_name <- as.factor(testingFinal$user_name)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.6, list = FALSE)
training <- df[inTrain,]
temp <- df[-inTrain,]
inTest <- createDataPartition(y = temp$classe, p = 0.5, list = FALSE)
testing <- temp[inTest,]
validation  <- temp[-inTest,]
# dim(df); dim(training); dim(testing); dim(validation)
modelrp <- train(classe ~ . , data = training, method="rpart")
modelrf <- train(classe ~ ., data = training, method="rf", prox=TRUE,
trControl = trainControl(method="cv"), number=3)
library(caret)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rattle)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE, na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", stringsAsFactors = FALSE, na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
# dim(df)
head(df)
str(df)
head(df[,1:5])
head(df[,1:6])
ggplot(df, aes(new_window, classe)) + geom_point()
ggplot(df, aes(new_window, classe)) + geom_point(jitter=TRUE)
head(df[,1:7])
head(df[,1:8])
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
str(df)
dim(df)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.7, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
dim(df)
dim(training)
dim(testing)
trControl <- trainControl(method="cv", number = 8)
modelct <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictionCT <- predict(modelCT, testing)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
trControl <- trainControl(method="cv", number = 8)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictionCT <- predict(modelCT, testing)
predictionCT <- predict(modelCT, testing)
accuracyCT <- mean((predictCT == testing$classe)
accuracyCT
predictionCT <- predict(modelCT, testing)
accuracyCT <- mean(predictCT == testing$classe)
predictionCT <- predict(modelCT, testing)
accuracyCT <- mean(predictionCT == testing$classe)
accuracyCT
modelRF <- train(classe ~ ., data = training, method="rf", verbose=FALSE,
trControl = trControl)
predictionCT <- predict(modelCT, testing)
conMatCT <- confusionMatrix(testing$classe, predictionCT)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictionCT <- predict(modelCT, testing)
conMatCT <- confusionMatrix(testing$classe, predictionCT)
predictionCT <- predict(modelCT, testing)
# conMatCT <- confusionMatrix(testing$classe, predictionCT)
head(predictionCT)
predictionCT <- predict(modelCT, testing)
# conMatCT <- confusionMatrix(testing$classe, predictionCT)
length(predictionCT)
predictionCT <- predict(modelCT, testing)
# conMatCT <- confusionMatrix(testing$classe, predictionCT)
length(predictionCT); dim(testing)
predictionCT <- predict(modelCT, testing)
# conMatCT <- confusionMatrix(testing$classe, predictionCT)
length(predictionCT); dim(testing)
confusionMatrix(predictionCT, testing$classe)
predictionCT <- predict(modelCT, testing)
# conMatCT <- confusionMatrix(testing$classe, predictionCT)
length(predictionCT); dim(testing)
confusionMatrix(testing$classe, predictionCT)
trControl <- trainControl(method="cv", number = 8)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
confusionMatrix(predict(modelCT, testing), testing$classe)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.7, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
dim(training); dim(testing)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rattle)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE, na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", stringsAsFactors = FALSE, na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.7, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 8)
predictCT <- predict(modelCT, newdata = testing)
confusionMatrix(testing$classe, predictCT)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.7, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
str(training)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rattle)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", stringsAsFactors = FALSE, na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", stringsAsFactors = FALSE, na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.7, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 8)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictCT <- predict(modelCT, newdata = testing)
confusionMatrix(testing$classe, predictCT)
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT$overall[1]
modelRF <- train(classe ~ ., data = training, method="rf", verbose=FALSE,
trControl = trControl)
modelRF <- train(classe ~ ., data = training, method="rf", verbose=FALSE,
trControl = trControl)
modelRF <- train(classe ~ ., data = training, method="rf", verbose=FALSE,
trControl = trControl)
trControl <- trainControl(method="cv", number = 5)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictCT <- predict(modelCT, newdata = testing)
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT
confMatCT$overall[1]
modelRF <- train(classe ~ ., data = training, method="rf", verbose=FALSE,
trControl = trControl)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
str(df)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
# df$classe <- as.factor(df$classe)
dim(df)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
dim(df)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.7, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 5)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.75, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 5)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictCT <- predict(modelCT, newdata = testing)
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rattle)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
dim(df)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.75, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 5)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictCT <- predict(modelCT, newdata = testing)
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT
modelRF <- train(classe ~ ., data = training, method="rf", verbose=FALSE,
trControl = trControl)
modelRF <- train(classe ~ ., data = training, method="rf", trControl = trControl, verbose=FALSE)
modelRF <- train(classe ~ ., data = training, method="rf", trControl = trControl, verbose=TRUE)
trControl <- trainControl(method="cv", number = 1)
modelRF <- train(classe ~ ., data = training, method="rf", trControl = trControl, verbose=TRUE)
trControl <- trainControl(method="cv", number = 2)
modelRF <- train(classe ~ ., data = training, method="rf", trControl = trControl, verbose=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rattle)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
dim(df)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.75, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 5)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictCT <- predict(modelCT, newdata = testing)
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT
confMatCT$overall[1]
# trControl <- trainControl(method="cv", number = 2)
modelRF <- train(classe ~ ., data = training, method="rf", trControl = none, verbose=TRUE)
# trControl <- trainControl(method="cv", number = 2)
modelRF <- train(classe ~ ., data = training, method="rf", trControl = trainControl(none), verbose=TRUE)
# trControl <- trainControl(method="cv", number = 2)
modelRF <- train(classe ~ ., data = training, method="rf", verbose=TRUE)
library(caret)
library(rattle)
library(randomForest)
x <- training[,-53]
y <- training$classe
modelRF <- train(x = x, y = y, ntree = 100)
modelRF <- randomForest(classe ~ ., data = training, ntree = 20)
predictRF <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictRF)
confMatRF
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rattle)
library(randomForest)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
dim(df)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.75, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 5)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictCT <- predict(modelCT, newdata = testing)
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT
confMatCT$overall[1]
modelRF <- randomForest(classe ~ ., data = training, ntree = 20)
predictRF <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictRF)
confMatRF
confMatCT$overall[1]
# modelgbm <- train(classe ~ . , data = training, method="gbm", verbose=FALSE)
# modelglmnet <- train(classe ~ ., data = training, method="glmnet", family="multinomial")
# modelglm
# modelknn <- train(classe ~ . , data = training, method="knn")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rattle)
library(randomForest)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
dim(df)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.75, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
trControl <- trainControl(method="cv", number = 5)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
predictCT <- predict(modelCT, newdata = testing)
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT
confMatCT$overall[1]
predictRF <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictRF)
confMatRF
library(caret)
library(rattle)
library(rpart)
library(randomForest)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", na.strings=c("NA",""), header=TRUE)
# disable forced conversion to factor variables and treat empty data as NA
trainingInitial <- read.csv("data/pml-training.csv", na.strings=c("NA",""), header = TRUE)
testingFinal <- read.csv("data/pml-testing.csv", na.strings=c("NA",""), header=TRUE)
NaRatio <- apply(trainingInitial, 2, function(col)sum(is.na(col))/length(col))
df <- trainingInitial[,NaRatio == 0]
df <- df[,-c(1:7)]
df$classe <- as.factor(df$classe)
dim(df)
set.seed(333)
inTrain <- createDataPartition(y = df$classe, p = 0.75, list = FALSE)
training <- df[inTrain,]
testing <- df[-inTrain,]
# dim(training); dim(testing)
modelCT <- train(classe ~ . , data = training, method="rpart", trControl = trControl)
modelRP<- rpart(classe ~ ., data = training, method="class")
predictCT <- predict(modelRP, newdata = testing)
confMatCT <- confusionMatrix(testing$classe, predictCT)
predictCT <- predict(modelRP, newdata = testing, type="class")
confMatCT <- confusionMatrix(testing$classe, predictCT)
confMatCT
modelRP<- rpart(classe ~ ., data = training, method="class")
predictCT <- predict(modelRP, newdata = testing, type="class")
predictRP <- predict(modelRP, newdata = testing, type="class")
confMatrixRP <- confusionMatrix(testing$classe, predictCT)
confMatrixRP
confMatrixRP$overall[1]
modelRF <- randomForest(classe ~ ., data = training, ntree = 20)
predictRF <- predict(modelRF, newdata = testing)
modelRF <- randomForest(classe ~ ., data = training, ntree = 20)
predictRF <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictRF)
confMatRF
modelRF <- randomForest(classe ~ ., data = training, ntree = 10)
predictRF <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictRF)
confMatRF
predictX <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictX)
confMatRF
modelRF <- randomForest(classe ~ ., data = training, ntree = 3)
predictRF <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictRF)
confMatRF
modelRF <- randomForest(classe ~ ., data = training, ntree = 10)
predictRF <- predict(modelRF, newdata = testing)
confMatRF <- confusionMatrix(testing$classe, predictRF)
confMatRF
modelRFC <- train(classe ~., data = training, method="ranger", tuneLength=10)
